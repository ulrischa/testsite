<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop mit schwebendem Element</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 1rem;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];
      draggedIndex = null;
      placeholderIndex = null;
      floatingElement = null;
      startY = 0;

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      initializeItems() {
        this.items = Array.from(this.children).map(child => child.outerHTML.trim());
      }

      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 4px 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: grab;
              user-select: none;
            }
            .placeholder {
              height: 10px;
              background-color: #3498db;
              margin: 4px 0;
              border-radius: 4px;
            }
            .floating {
              position: fixed;
              z-index: 1000;
              pointer-events: none;
              background: white;
              box-shadow: 0 4px 6px rgba(0,0,0,0.2);
              padding: 10px;
              border: 1px solid #3498db;
              border-radius: 4px;
            }
            .hidden {
              visibility: hidden;
            }
          </style>
          ${this.items.map((content, index) => `
            ${index === this.placeholderIndex ? '<div class="placeholder"></div>' : ''}
            <div class="item ${index === this.draggedIndex ? 'hidden' : ''}" data-index="${index}">
              ${content}
            </div>
          `).join('')}
          ${this.placeholderIndex === this.items.length ? '<div class="placeholder"></div>' : ''}
        `;
        this.addEventListeners();
      }

      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach(item => {
          item.addEventListener('mousedown', (e) => this.onStart(e, item));
          item.addEventListener('touchstart', (e) => this.onStart(e, item), { passive: false });
        });
        window.addEventListener('mousemove', (e) => this.onMove(e));
        window.addEventListener('touchmove', (e) => this.onMove(e), { passive: false });
        window.addEventListener('mouseup', () => this.onEnd());
        window.addEventListener('touchend', () => this.onEnd());
      }

      onStart(event, item) {
        event.preventDefault();
        this.draggedIndex = parseInt(item.dataset.index);
        const rect = item.getBoundingClientRect();
        this.createFloatingElement(item, rect, event.clientX || event.touches[0].clientX, event.clientY || event.touches[0].clientY);
        this.placeholderIndex = this.draggedIndex;
        this.render();
      }

      onMove(event) {
        if (!this.floatingElement) return;

        const x = event.clientX || event.touches[0].clientX;
        const y = event.clientY || event.touches[0].clientY;
        this.floatingElement.style.left = `${x}px`;
        this.floatingElement.style.top = `${y}px`;

        const items = Array.from(this.shadowRoot.querySelectorAll('.item'));
        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          if (y > rect.top && y < rect.bottom) {
            this.placeholderIndex = index;
          }
        });

        if (y > window.innerHeight) {
          this.placeholderIndex = this.items.length;
        }

        this.render();
      }

      onEnd() {
        if (this.floatingElement) {
          document.body.removeChild(this.floatingElement);
          this.floatingElement = null;
        }
        this.updateOrder();
      }

      createFloatingElement(item, rect, x, y) {
        this.floatingElement = document.createElement('div');
        this.floatingElement.classList.add('floating');
        this.floatingElement.textContent = item.textContent;
        this.floatingElement.style.width = `${rect.width}px`;
        this.floatingElement.style.left = `${x}px`;
        this.floatingElement.style.top = `${y}px`;
        document.body.appendChild(this.floatingElement);
      }

      updateOrder() {
        if (this.draggedIndex !== null && this.placeholderIndex !== null) {
          const [movedItem] = this.items.splice(this.draggedIndex, 1);
          this.items.splice(this.placeholderIndex, 0, movedItem);
        }
        this.draggedIndex = null;
        this.placeholderIndex = null;
        this.render();
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
