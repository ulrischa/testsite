<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop mit Floating-Element</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 1rem;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];
      draggedIndex = null;
      placeholderIndex = null;
      floatingElement = null;

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      initializeItems() {
        this.items = Array.from(this.children).map(child => child.outerHTML.trim());
      }

      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 4px 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: grab;
              transition: transform 0.1s ease;
            }
            .placeholder {
              height: 40px;
              background: #ddd;
              border: 2px dashed #aaa;
              margin: 4px 0;
            }
            .floating {
              position: absolute;
              pointer-events: none;
              z-index: 1000;
              background: #f3f3f3;
              box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
              padding: 10px;
              border: 1px solid #ccc;
              border-radius: 4px;
            }
          </style>
          ${this.items.map((content, index) => `
            ${index === this.placeholderIndex ? '<div class="placeholder"></div>' : ''}
            ${index === this.draggedIndex ? '' : `<div class="item" draggable="true" data-index="${index}">${content}</div>`}
          `).join('')}
        `;
        this.addEventListeners();
      }

      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach(item => {
          item.addEventListener('dragstart', e => this.onDragStart(e, item));
          item.addEventListener('dragover', e => e.preventDefault());
          item.addEventListener('drop', () => this.finalizeMove());

          item.addEventListener('touchstart', e => this.onTouchStart(e, item), { passive: false });
          item.addEventListener('touchmove', e => this.onTouchMove(e), { passive: false });
          item.addEventListener('touchend', () => this.finalizeMove());
        });
      }

      /** Start des Ziehens */
      onDragStart(event, item) {
        this.startDrag(item, event.clientX, event.clientY);
      }

      onTouchStart(event, item) {
        event.preventDefault();
        const touch = event.touches[0];
        this.startDrag(item, touch.clientX, touch.clientY);
      }

      startDrag(item, x, y) {
        this.draggedIndex = parseInt(item.dataset.index);
        this.placeholderIndex = this.draggedIndex;
        this.createFloatingElement(item, x, y);
        this.render();
      }

      createFloatingElement(item, x, y) {
        this.floatingElement = document.createElement('div');
        this.floatingElement.classList.add('floating');
        this.floatingElement.style.left = `${x}px`;
        this.floatingElement.style.top = `${y}px`;
        this.floatingElement.innerHTML = item.innerHTML;
        document.body.appendChild(this.floatingElement);
      }

      /** Bewege das Floating-Element */
      onTouchMove(event) {
        const touch = event.touches[0];
        this.floatingElement.style.transform = `translate(${touch.clientX}px, ${touch.clientY}px)`;
        this.updatePlaceholder(touch.clientY);
      }

      onTouchMove(event) {
        event.preventDefault();
        const touch = event.touches[0];
        this.updateFloatingPosition(touch.clientX, touch.clientY);
        this.updatePlaceholder(touch.clientY);
      }

      updateFloatingPosition(x, y) {
        this.floatingElement.style.left = `${x - 50}px`;
        this.floatingElement.style.top = `${y - 20}px`;
      }

      updatePlaceholder(currentY) {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          if (currentY > rect.top && currentY < rect.bottom) {
            this.placeholderIndex = index;
          } else if (currentY > rect.bottom) {
            this.placeholderIndex = this.items.length;
          }
        });
        this.render();
      }

      finalizeMove() {
        if (this.draggedIndex !== null && this.placeholderIndex !== null) {
          const [movedItem] = this.items.splice(this.draggedIndex, 1);
          this.items.splice(this.placeholderIndex, 0, movedItem);
        }
        this.cleanup();
        this.render();
      }

      cleanup() {
        this.draggedIndex = null;
        this.placeholderIndex = null;
        if (this.floatingElement) {
          this.floatingElement.remove();
          this.floatingElement = null;
        }
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
