<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop mit Platzhalter-Markierung</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 1rem;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];         // Datenquelle
      draggedIndex = null; // Index des gezogenen Elements
      placeholderIndex = null; // Zielposition
      startY = 0;         // Startposition der Fingerbewegung
      currentY = 0;       // Aktuelle Fingerposition

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      /** Initialisiere die Datenquelle */
      initializeItems() {
        this.items = Array.from(this.children).map((child) => child.outerHTML.trim());
      }

      /** Rendert die Liste basierend auf der Datenquelle */
      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 4px 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: grab;
              user-select: none;
              transition: transform 0.1s ease, box-shadow 0.1s ease;
            }
            .dragging {
              opacity: 0.7;
              z-index: 1000;
              cursor: grabbing;
              box-shadow: 0 4px 6px rgba(0,0,0,0.2);
            }
            .placeholder {
              height: 10px;
              background-color: #3498db;
              border-radius: 4px;
              margin: 4px 0;
              transition: background-color 0.2s ease;
            }
          </style>
          ${this.items.map((content, index) => `
            <div class="item" draggable="true" data-index="${index}">
              ${content}
            </div>
          `).join('')}
          ${this.placeholderIndex !== null ? `<div class="placeholder"></div>` : ''}
        `;
        this.addEventListeners();
      }

      /** FÃ¼gt Event-Handler hinzu */
      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach((item) => {
          item.addEventListener('dragstart', (e) => this.onDragStart(e, item));
          item.addEventListener('dragover', (e) => this.onDragOver(e, item));
          item.addEventListener('drop', (e) => this.onDrop(e, item));

          item.addEventListener('touchstart', (e) => this.onTouchStart(e, item), { passive: false });
          item.addEventListener('touchmove', (e) => this.onTouchMove(e, item), { passive: false });
          item.addEventListener('touchend', () => this.onTouchEnd());
        });
      }

      /** Drag-Start */
      onDragStart(event, item) {
        this.draggedIndex = parseInt(item.dataset.index);
        item.classList.add('dragging');
      }

      /** Drag-Over: Zielposition berechnen */
      onDragOver(event, item) {
        event.preventDefault();
        const targetIndex = parseInt(item.dataset.index);
        if (this.placeholderIndex !== targetIndex) {
          this.placeholderIndex = targetIndex;
          this.render();
        }
      }

      /** Drop: Reihenfolge aktualisieren */
      onDrop(event, item) {
        const targetIndex = parseInt(item.dataset.index);
        this.updateOrder(targetIndex);
      }

      /** Touch-Start */
      onTouchStart(event, item) {
        event.preventDefault();
        this.draggedIndex = parseInt(item.dataset.index);
        this.startY = event.touches[0].clientY;
        item.classList.add('dragging');
      }

      /** Touch-Move: Zielposition berechnen */
      onTouchMove(event, item) {
        event.preventDefault();
        const deltaY = event.touches[0].clientY - this.startY;
        item.style.transform = `translateY(${deltaY}px)`;

        const items = Array.from(this.shadowRoot.querySelectorAll('.item'));
        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          const middle = rect.top + rect.height / 2;
          if (event.touches[0].clientY > middle) {
            this.placeholderIndex = index + 1;
          } else if (event.touches[0].clientY < middle) {
            this.placeholderIndex = index;
          }
        });

        this.render();
      }

      /** Touch-End: Finalisiere Reihenfolge */
      onTouchEnd() {
        if (this.placeholderIndex !== null) {
          this.updateOrder(this.placeholderIndex);
        }
      }

      /** Aktualisiere die Reihenfolge in der Datenquelle */
      updateOrder(targetIndex) {
        if (this.draggedIndex !== null && targetIndex !== null && this.draggedIndex !== targetIndex) {
          const [movedItem] = this.items.splice(this.draggedIndex, 1);
          this.items.splice(targetIndex, 0, movedItem);
        }
        this.draggedIndex = null;
        this.placeholderIndex = null;
        this.render();
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
