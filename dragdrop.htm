<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Datengetriebenes Drag-and-Drop für Desktop und Mobile</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];
      draggedIndex = null;
      startY = 0;

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      /** Initialisiere die Datenquelle */
      initializeItems() {
        this.items = Array.from(this.children).map((child) => child.outerHTML.trim());
      }

      /** Rendert die Liste basierend auf der Datenquelle */
      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 4px 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: move;
              user-select: none;
              transition: transform 0.1s ease;
            }
            .dragging {
              opacity: 0.7;
              position: relative;
              z-index: 1000;
            }
          </style>
          ${this.items.map((content, index) => `
            <div class="item" draggable="true" data-index="${index}">
              ${content}
            </div>
          `).join('')}
        `;
        this.addEventListeners();
      }

      /** Fügt Drag-and-Drop und Touch-Event-Handler hinzu */
      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach((item) => {
          item.addEventListener('dragstart', (e) => this.onDragStart(e, item));
          item.addEventListener('dragover', (e) => e.preventDefault());
          item.addEventListener('drop', (e) => this.onDrop(e, item));

          // Touch Events
          item.addEventListener('touchstart', (e) => this.onTouchStart(e, item), { passive: false });
          item.addEventListener('touchmove', (e) => this.onTouchMove(e, item), { passive: false });
          item.addEventListener('touchend', () => this.onTouchEnd());
        });
      }

      /** Start Drag: Speichere den Index */
      onDragStart(event, item) {
        this.draggedIndex = parseInt(item.dataset.index);
        item.classList.add('dragging');
      }

      /** Drop: Tausche die Reihenfolge */
      onDrop(event, targetItem) {
        const targetIndex = parseInt(targetItem.dataset.index);
        this.swapItems(this.draggedIndex, targetIndex);
        this.render();
      }

      /** Touch Start: Beginne den Zug */
      onTouchStart(event, item) {
        event.preventDefault(); // Verhindert das Scrollen
        this.draggedIndex = parseInt(item.dataset.index);
        this.startY = event.touches[0].clientY;
        item.classList.add('dragging');
      }

      /** Touch Move: Bewege das Element visuell */
      onTouchMove(event, item) {
        event.preventDefault(); // Verhindert das Scrollen
        const deltaY = event.touches[0].clientY - this.startY;
        item.style.transform = `translate3d(0, ${deltaY}px, 0)`;

        // Überprüfe, ob das Element die Mitte eines anderen Elements erreicht hat
        const items = Array.from(this.shadowRoot.querySelectorAll('.item'));
        const currentIndex = this.draggedIndex;

        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          const middle = rect.top + rect.height / 2;
          const touchY = event.touches[0].clientY;

          if (index !== currentIndex && touchY > middle) {
            this.swapItems(currentIndex, index);
            this.startY = event.touches[0].clientY; // Update Startpunkt
            this.render();
          }
        });
      }

      /** Touch End: Finalisiere die Bewegung */
      onTouchEnd() {
        const draggedItem = this.shadowRoot.querySelector('.dragging');
        if (draggedItem) {
          draggedItem.style.transform = '';
          draggedItem.classList.remove('dragging');
        }
        this.draggedIndex = null;
      }

      /** Tausche zwei Items in der Datenquelle */
      swapItems(fromIndex, toIndex) {
        const temp = this.items[fromIndex];
        this.items[fromIndex] = this.items[toIndex];
        this.items[toIndex] = temp;
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
