<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sortable List Web Component</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f9f9f9;
    }
    h1 {
      text-align: center;
      font-size: 24px;
    }
  </style>
</head>
<body>
  <h1>Drag & Drop Sortable List</h1>

  <!-- Verwendung der Web Component -->
  <sortable-list>
    <div class="item">Element 1</div>
    <div class="item">Element 2</div>
    <div class="item">Element 3</div>
    <div class="item">Element 4</div>
    <div class="item">Element 5</div>
  </sortable-list>

  <script>
    // Web Component Definition
    class SortableList extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });
        this.items = [];
      }

      connectedCallback() {
        this.initTemplate();
        this.collectItems();
        this.render();
        this.addDragAndDrop();
      }

      initTemplate() {
        const template = document.createElement("template");
        template.innerHTML = `
          <style>
            ::slotted(.item) {
              padding: 10px;
              margin: 5px;
              background-color: #f0f0f0;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: move;
              user-select: none;
              transition: background 0.2s, transform 0.2s;
            }

            ::slotted(.item.dragging) {
              background-color: #d0e4ff;
              opacity: 0.7;
              transform: scale(1.05);
            }
          </style>
          <slot></slot>
        `;
        this.shadowRoot.appendChild(template.content.cloneNode(true));
      }

      collectItems() {
        const slot = this.shadowRoot.querySelector("slot");
        this.items = Array.from(slot.assignedElements()).filter((el) =>
          el.classList.contains("item")
        );
      }

      render() {
        this.items.forEach((item, index) => {
          item.dataset.index = index; // Datenbindung
        });
      }

      addDragAndDrop() {
        let draggedItem = null;

        this.items.forEach((item) => {
          item.draggable = true;

          item.addEventListener("dragstart", (e) => {
            draggedItem = item;
            item.classList.add("dragging");
            e.dataTransfer.effectAllowed = "move";
          });

          item.addEventListener("dragover", (e) => {
            e.preventDefault();
            const target = e.target;
            if (target && target !== draggedItem && target.classList.contains("item")) {
              const draggedIndex = parseInt(draggedItem.dataset.index, 10);
              const targetIndex = parseInt(target.dataset.index, 10);

              if (draggedIndex < targetIndex) {
                target.after(draggedItem);
              } else {
                target.before(draggedItem);
              }

              this.updateData();
            }
          });

          item.addEventListener("dragend", () => {
            draggedItem.classList.remove("dragging");
            draggedItem = null;
          });
        });
      }

      updateData() {
        this.items = Array.from(this.querySelectorAll(".item"));
        this.render();
      }
    }

    customElements.define("sortable-list", SortableList);

    // Polyfill für mobile Geräte (falls notwendig)
    (function () {
      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
      if (isMobile) {
        const script = document.createElement("script");
        script.src = "https://cdn.jsdelivr.net/npm/mobile-drag-drop@latest/index.min.js";
        script.onload = () => window.mobileDragDrop.polyfill();
        document.head.appendChild(script);
      }
    })();
  </script>
</body>
</html>
