<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop mit Schattenlinie</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 1rem;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];
      draggedIndex = null;
      insertLineIndex = null;

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      initializeItems() {
        this.items = Array.from(this.children).map(child => child.outerHTML.trim());
      }

      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: grab;
              user-select: none;
            }
            .dragging {
              opacity: 0.5;
              cursor: grabbing;
            }
            .insert-line {
              height: 4px;
              background: #0078ff;
              margin: 0;
            }
          </style>
          ${this.items.map((content, index) => `
            ${index === this.insertLineIndex ? '<div class="insert-line"></div>' : ''}
            <div class="item" draggable="true" data-index="${index}">${content}</div>
          `).join('')}
          ${this.insertLineIndex === this.items.length ? '<div class="insert-line"></div>' : ''}
        `;
        this.addEventListeners();
      }

      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach(item => {
          item.addEventListener('dragstart', (e) => this.onDragStart(e, item));
          item.addEventListener('dragover', (e) => this.onDragOver(e, item));
          item.addEventListener('drop', () => this.onDrop());

          item.addEventListener('touchstart', (e) => this.onTouchStart(e, item), { passive: false });
          item.addEventListener('touchmove', (e) => this.onTouchMove(e), { passive: false });
          item.addEventListener('touchend', () => this.onTouchEnd());
        });
      }

      onDragStart(event, item) {
        this.draggedIndex = parseInt(item.dataset.index);
        item.classList.add('dragging');
      }

      onDragOver(event, target) {
        event.preventDefault();
        const targetIndex = parseInt(target.dataset.index);
        this.insertLineIndex = targetIndex;
        this.render();
      }

      onDrop() {
        this.updateOrder(this.insertLineIndex);
      }

      onTouchStart(event, item) {
        event.preventDefault();
        this.draggedIndex = parseInt(item.dataset.index);
      }

      onTouchMove(event) {
        event.preventDefault();
        const touchY = event.touches[0].clientY;

        const items = Array.from(this.shadowRoot.querySelectorAll('.item'));
        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          if (touchY < rect.bottom) {
            this.insertLineIndex = index;
          }
        });
        this.render();
      }

      onTouchEnd() {
        this.updateOrder(this.insertLineIndex);
      }

      updateOrder(targetIndex) {
        if (this.draggedIndex !== null && targetIndex !== null) {
          const [movedItem] = this.items.splice(this.draggedIndex, 1);
          this.items.splice(targetIndex, 0, movedItem);
        }
        this.draggedIndex = null;
        this.insertLineIndex = null;
        this.render();
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
