<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drag-and-Drop Web Component</title>
    <style>
        .draggable-item {
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            cursor: move;
        }
        .dragging {
            opacity: 0.5;
        }
        drag-sorter {
            display: block;
            width: 300px;
        }
    </style>
</head>
<body>
    <!-- Die benutzerdefinierte Webkomponente -->
    <drag-sorter></drag-sorter>

    <script>
        class DragSorter extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: "open" });
                this.data = ["Item 1", "Item 2", "Item 3", "Item 4"];
                this.draggedIndex = null;
                this.render();
            }

            connectedCallback() {
                this.addEventListeners();
                this.applyMobilePolyfill();
            }

            render() {
                this.shadowRoot.innerHTML = `
                    <div id="container">
                        ${this.data.map((item, index) => `
                            <div class="draggable-item" draggable="true" data-index="${index}">
                                ${item}
                            </div>
                        `).join("")}
                    </div>
                `;
            }

            addEventListeners() {
                const container = this.shadowRoot.getElementById("container");
                container.addEventListener("dragstart", (e) => this.onDragStart(e));
                container.addEventListener("dragover", (e) => this.onDragOver(e));
                container.addEventListener("drop", (e) => this.onDrop(e));
                container.addEventListener("dragend", () => this.onDragEnd());
            }

            onDragStart(event) {
                this.draggedIndex = event.target.dataset.index;
                event.target.classList.add("dragging");
            }

            onDragOver(event) {
                event.preventDefault();
                const target = event.target.closest('.draggable-item');
                if (target && target.dataset.index !== this.draggedIndex) {
                    const targetIndex = target.dataset.index;
                    this.swapItems(this.draggedIndex, targetIndex);
                    this.draggedIndex = targetIndex;
                    this.render();
                    this.addEventListeners();
                }
            }

            onDrop(event) {
                event.preventDefault();
            }

            onDragEnd() {
                this.shadowRoot.querySelectorAll(".draggable-item").forEach(el => el.classList.remove("dragging"));
            }

            swapItems(fromIndex, toIndex) {
                const temp = this.data[fromIndex];
                this.data[fromIndex] = this.data[toIndex];
                this.data[toIndex] = temp;
            }

            applyMobilePolyfill() {
                // Polyfill für Drag-and-Drop auf mobilen Geräten
                let touchItem = null;

                this.shadowRoot.addEventListener("touchstart", (e) => {
                    touchItem = e.target.closest(".draggable-item");
                    if (touchItem) {
                        touchItem.classList.add("dragging");
                        this.draggedIndex = touchItem.dataset.index;
                    }
                });

                this.shadowRoot.addEventListener("touchmove", (e) => {
                    e.preventDefault();
                    const touch = e.touches[0];
                    const target = document.elementFromPoint(touch.clientX, touch.clientY)?.closest(".draggable-item");

                    if (target && target !== touchItem) {
                        const targetIndex = target.dataset.index;
                        this.swapItems(this.draggedIndex, targetIndex);
                        this.draggedIndex = targetIndex;
                        this.render();
                        this.addEventListeners();
                        touchItem = this.shadowRoot.querySelector(`[data-index="${targetIndex}"]`);
                        touchItem.classList.add("dragging");
                    }
                });

                this.shadowRoot.addEventListener("touchend", () => {
                    this.shadowRoot.querySelectorAll(".draggable-item").forEach(el => el.classList.remove("dragging"));
                    touchItem = null;
                });
            }
        }

        // Definieren der neuen Webkomponente
        customElements.define("drag-sorter", DragSorter);
    </script>
</body>
</html>
