<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Component: Sortable List</title>
</head>
<body>
    <sortable-list></sortable-list>

    <script>
        /**
         * Web Component for individual list items.
         * This component represents a single list item.
         */
        class ListItem extends HTMLElement {
            constructor() {
                super();

                // Create Shadow DOM
                this.attachShadow({ mode: 'open' });

                // Initial rendering
                this.render();
            }

            static get observedAttributes() {
                return ['content'];
            }

            attributeChangedCallback(name, oldValue, newValue) {
                if (name === 'content') {
                    this.render();
                }
            }

            render() {
                this.shadowRoot.innerHTML = `
                    <style>
                        li {
                            padding: 8px 12px;
                            border: 1px solid #ddd;
                            margin-bottom: 4px;
                            background: #f9f9f9;
                            cursor: grab;
                        }
                        li.dragging {
                            opacity: 0.5;
                        }
                    </style>
                    <li draggable="true">${this.getAttribute('content') || ''}</li>
                `;

                const li = this.shadowRoot.querySelector('li');
                li.addEventListener('dragstart', (event) => {
                    event.dataTransfer.setData('text/plain', this.getAttribute('content'));
                    this.dispatchEvent(new CustomEvent('dragstart', { bubbles: true }));
                });

                li.addEventListener('dragend', () => {
                    this.dispatchEvent(new CustomEvent('dragend', { bubbles: true }));
                });
            }
        }

        customElements.define('list-item', ListItem);

        /**
         * Web Component for the sortable list.
         */
        class SortableList extends HTMLElement {
            constructor() {
                super();

                // Shadow DOM
                this.attachShadow({ mode: 'open' });

                // Initial state
                this.state = {
                    items: ['Item 1', 'Item 2', 'Item 3', 'Item 4'],
                };

                // Bind methods
                this.handleDragOver = this.handleDragOver.bind(this);
                this.handleDrop = this.handleDrop.bind(this);

                this.render();
            }

            render() {
                this.shadowRoot.innerHTML = `
                    <style>
                        ul {
                            list-style: none;
                            padding: 0;
                            margin: 0;
                            border: 1px solid #ccc;
                            max-width: 300px;
                        }
                    </style>
                    <ul></ul>
                `;

                const ul = this.shadowRoot.querySelector('ul');

                // Add event listeners
                ul.addEventListener('dragover', this.handleDragOver);
                ul.addEventListener('drop', this.handleDrop);

                // Render list items based on state
                this.state.items.forEach((item) => {
                    const listItem = document.createElement('list-item');
                    listItem.setAttribute('content', item);

                    listItem.addEventListener('dragstart', () => {
                        this.draggingItem = item;
                    });

                    listItem.addEventListener('dragend', () => {
                        this.draggingItem = null;
                    });

                    ul.appendChild(listItem);
                });
            }

            handleDragOver(event) {
                event.preventDefault(); // Necessary for drop to work
            }

            handleDrop(event) {
                event.preventDefault();

                const ul = this.shadowRoot.querySelector('ul');
                const items = Array.from(ul.children).map((child) => child.getAttribute('content'));
                const dropTarget = event.target.closest('list-item');

                if (dropTarget) {
                    const dropIndex = items.indexOf(dropTarget.getAttribute('content'));
                    const dragIndex = items.indexOf(this.draggingItem);

                    // Reorder items
                    items.splice(dragIndex, 1);
                    items.splice(dropIndex, 0, this.draggingItem);

                    // Update state
                    this.state = { items };
                    this.render();
                }
            }
        }

        customElements.define('sortable-list', SortableList);
    </script>
</body>
</html>
