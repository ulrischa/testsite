<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sortable Web Component</title>
</head>
<body>
  <!-- Verwendung der Web Component -->
  <sortable-container>
    <div>Item 1</div>
    <div>Item 2</div>
    <div>Item 3</div>
  </sortable-container>

  <script>
    class SortableContainer extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: 'open' });

        // Initiales HTML Template
        this.shadowRoot.innerHTML = `
          <style>
            :host {
              display: block;
            }
            .sortable-container {
              display: flex;
              flex-direction: column;
              gap: 0.5rem;
            }
            .sortable-item {
              padding: 1rem;
              border: 1px solid #ccc;
              background-color: #f9f9f9;
              cursor: grab;
              user-select: none;
            }
            .sortable-item.dragging {
              opacity: 0.5;
              background-color: #e0e0e0;
            }
          </style>
          <div class="sortable-container">
            <slot></slot>
          </div>
        `;

        this.sortableContainer = this.shadowRoot.querySelector('.sortable-container');
        this.draggedItem = null;
        this.polyfillApplied = false;
      }

      connectedCallback() {
        this._initSortableItems();
        this._applyMobileDragDropPolyfill();
      }

      _initSortableItems() {
        const slot = this.shadowRoot.querySelector('slot');
        slot.addEventListener('slotchange', () => {
          const items = slot.assignedElements().filter(el => el.tagName !== 'STYLE');

          items.forEach(item => {
            item.classList.add('sortable-item');

            item.draggable = true;

            item.addEventListener('dragstart', (e) => this._onDragStart(e, item));
            item.addEventListener('dragover', (e) => this._onDragOver(e));
            item.addEventListener('dragend', () => this._onDragEnd(item));
            item.addEventListener('drop', (e) => this._onDrop(e, item));
          });
        });
      }

      _onDragStart(event, item) {
        this.draggedItem = item;
        item.classList.add('dragging');
        event.dataTransfer.effectAllowed = 'move';
      }

      _onDragOver(event) {
        event.preventDefault();
      }

      _onDrop(event, targetItem) {
        event.preventDefault();

        if (this.draggedItem && this.draggedItem !== targetItem) {
          const container = this.sortableContainer;
          const items = [...this.children];
          const draggedIndex = items.indexOf(this.draggedItem);
          const targetIndex = items.indexOf(targetItem);

          if (draggedIndex > targetIndex) {
            container.insertBefore(this.draggedItem, targetItem);
          } else {
            container.insertBefore(this.draggedItem, targetItem.nextSibling);
          }

          this._updateDataModel();
        }
      }

      _onDragEnd(item) {
        item.classList.remove('dragging');
        this.draggedItem = null;
      }

      _updateDataModel() {
        const slot = this.shadowRoot.querySelector('slot');
        const sortedItems = slot.assignedElements().filter(el => el.tagName !== 'STYLE');

        // Optional: Aktualisiere das interne Datenmodell oder löse ein Event aus
        this.dispatchEvent(new CustomEvent('sort', {
          detail: sortedItems.map(item => item.textContent)
        }));
      }

      _applyMobileDragDropPolyfill() {
        if (!this.polyfillApplied && this._isMobileDevice()) {
          this.polyfillApplied = true;

          // Polyfill für Drag-and-Drop auf mobilen Geräten
          import('https://cdnjs.cloudflare.com/ajax/libs/mobile-drag-drop/2.3.0/index.min.js')
            .then(() => {
              console.log('Drag-and-Drop Polyfill geladen.');
            });
        }
      }

      _isMobileDevice() {
        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
      }
    }

    customElements.define('sortable-container', SortableContainer);
  </script>
</body>
</html>
