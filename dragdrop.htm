<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop mit schwebendem Element</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 1rem;
    }
  </style>
</head>
<body>
  <sortable-list>
    <div>Element 1</div>
    <div>Element 2</div>
    <div>Element 3</div>
    <div>Element 4</div>
    <div>Element 5</div>
  </sortable-list>

  <script>
    class SortableList extends HTMLElement {
      items = [];             // Datenquelle
      draggedIndex = null;    // Index des gezogenen Elements
      placeholderIndex = null;// Index der Zielposition
      floatingElement = null; // Schwebendes Element
      startY = 0;             // Startposition der Bewegung

      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      connectedCallback() {
        this.initializeItems();
        this.render();
      }

      initializeItems() {
        this.items = Array.from(this.children).map(child => child.outerHTML.trim());
      }

      render() {
        this.shadowRoot.innerHTML = `
          <style>
            .item {
              padding: 10px;
              margin: 4px 0;
              background: #f3f3f3;
              border: 1px solid #ccc;
              border-radius: 4px;
              cursor: grab;
              user-select: none;
              transition: box-shadow 0.2s ease;
            }
            .placeholder {
              height: 10px;
              background-color: #3498db;
              margin: 4px 0;
              border-radius: 4px;
            }
            .floating {
              position: fixed;
              z-index: 1000;
              pointer-events: none;
              background: white;
              box-shadow: 0 4px 6px rgba(0,0,0,0.2);
              padding: 10px;
              border: 1px solid #3498db;
              border-radius: 4px;
            }
          </style>
          ${this.items.map((content, index) => `
            ${index === this.placeholderIndex ? '<div class="placeholder"></div>' : ''}
            <div class="item" draggable="true" data-index="${index}">${content}</div>
          `).join('')}
          ${this.placeholderIndex === this.items.length ? '<div class="placeholder"></div>' : ''}
        `;
        this.addEventListeners();
      }

      addEventListeners() {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach(item => {
          item.addEventListener('dragstart', (e) => this.onDragStart(e, item));
          item.addEventListener('dragover', (e) => this.onDragOver(e, item));
          item.addEventListener('drop', () => this.onDrop());
          item.addEventListener('touchstart', (e) => this.onTouchStart(e, item), { passive: false });
          item.addEventListener('touchmove', (e) => this.onTouchMove(e), { passive: false });
          item.addEventListener('touchend', () => this.onTouchEnd());
        });
      }

      onDragStart(event, item) {
        this.draggedIndex = parseInt(item.dataset.index);
        this.createFloatingElement(item, event.clientX, event.clientY);
      }

      onDragOver(event, item) {
        event.preventDefault();
        this.updatePlaceholder(event.clientY);
      }

      onDrop() {
        this.updateOrder();
      }

      onTouchStart(event, item) {
        event.preventDefault();
        this.draggedIndex = parseInt(item.dataset.index);
        this.startY = event.touches[0].clientY;
        this.createFloatingElement(item, event.touches[0].clientX, event.touches[0].clientY);
      }

      onTouchMove(event) {
        event.preventDefault();
        this.moveFloatingElement(event.touches[0].clientX, event.touches[0].clientY);
        this.updatePlaceholder(event.touches[0].clientY);
      }

      onTouchEnd() {
        this.updateOrder();
      }

      createFloatingElement(item, x, y) {
        this.floatingElement = document.createElement('div');
        this.floatingElement.classList.add('floating');
        this.floatingElement.textContent = item.textContent;
        this.floatingElement.style.left = `${x}px`;
        this.floatingElement.style.top = `${y}px`;
        document.body.appendChild(this.floatingElement);
        this.placeholderIndex = this.draggedIndex;
        this.render();
      }

      moveFloatingElement(x, y) {
        this.floatingElement.style.left = `${x}px`;
        this.floatingElement.style.top = `${y}px`;
      }

      updatePlaceholder(clientY) {
        const items = this.shadowRoot.querySelectorAll('.item');
        items.forEach((el, index) => {
          const rect = el.getBoundingClientRect();
          if (clientY > rect.top && clientY < rect.bottom) {
            this.placeholderIndex = index;
          }
        });
        this.render();
      }

      updateOrder() {
        const [movedItem] = this.items.splice(this.draggedIndex, 1);
        this.items.splice(this.placeholderIndex, 0, movedItem);
        this.draggedIndex = null;
        this.placeholderIndex = null;
        document.body.removeChild(this.floatingElement);
        this.floatingElement = null;
        this.render();
      }
    }

    customElements.define('sortable-list', SortableList);
  </script>
</body>
</html>
