<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Component: Sortable List</title>
</head>
<body>
    <sortable-list></sortable-list>

    <script>
        /**
         * Web Component for individual list items.
         * This component represents a single list item.
         */
        class ListItem extends HTMLElement {
            constructor() {
                super();

                // Create Shadow DOM
                this.attachShadow({ mode: 'open' });

                // Initial rendering
                this.render();
            }

            // Observed attributes to dynamically update content
            static get observedAttributes() {
                return ['content'];
            }

            attributeChangedCallback(name, oldValue, newValue) {
                if (name === 'content') {
                    this.render();
                }
            }

            render() {
                // Clear existing content
                this.shadowRoot.innerHTML = '';

                // Create list item template
                const li = document.createElement('li');
                li.textContent = this.getAttribute('content') || '';
                li.draggable = true;

                // Add drag event listeners
                li.addEventListener('dragstart', this.handleDragStart);
                li.addEventListener('dragend', this.handleDragEnd);

                this.shadowRoot.appendChild(li);
            }

            handleDragStart(event) {
                event.dataTransfer.setData('text/plain', event.target.textContent);
                event.target.classList.add('dragging');
            }

            handleDragEnd(event) {
                event.target.classList.remove('dragging');
            }
        }

        // Define the ListItem component
        customElements.define('list-item', ListItem);

        /**
         * Web Component for the sortable list.
         * This component manages a list of sortable items.
         */
        class SortableList extends HTMLElement {
            constructor() {
                super();

                // Create Shadow DOM
                this.attachShadow({ mode: 'open' });

                // State management
                this.state = {
                    items: ['Item 1', 'Item 2', 'Item 3', 'Item 4'],
                };

                // Initial rendering
                this.render();
            }

            render() {
                // Clear existing content
                this.shadowRoot.innerHTML = '';

                // Create styles
                const style = document.createElement('style');
                style.textContent = `
                    ul {
                        list-style: none;
                        padding: 0;
                        margin: 0;
                        border: 1px solid #ccc;
                        max-width: 300px;
                    }
                    li {
                        padding: 8px 12px;
                        border: 1px solid #ddd;
                        margin-bottom: 4px;
                        background: #f9f9f9;
                        cursor: grab;
                    }
                    li.dragging {
                        opacity: 0.5;
                    }
                `;

                // Create list container
                const ul = document.createElement('ul');
                ul.addEventListener('dragover', this.handleDragOver.bind(this));
                ul.addEventListener('drop', this.handleDrop.bind(this));

                // Populate list items
                this.state.items.forEach((item) => {
                    const listItem = document.createElement('list-item');
                    listItem.setAttribute('content', item);
                    ul.appendChild(listItem);
                });

                // Append elements to Shadow DOM
                this.shadowRoot.appendChild(style);
                this.shadowRoot.appendChild(ul);
            }

            handleDragOver(event) {
                event.preventDefault(); // Allow dropping
                const ul = this.shadowRoot.querySelector('ul');
                const afterElement = this.getDragAfterElement(ul, event.clientY);
                const draggingElement = ul.querySelector('.dragging');
                if (afterElement == null) {
                    ul.appendChild(draggingElement);
                } else {
                    ul.insertBefore(draggingElement, afterElement);
                }
            }

            handleDrop(event) {
                event.preventDefault();

                // Rebuild the state from the updated DOM
                const ul = this.shadowRoot.querySelector('ul');
                const newItems = Array.from(ul.children).map(
                    (item) => item.getAttribute('content')
                );
                this.state.items = newItems;

                this.render();
            }

            getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('li:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;
                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }
        }

        // Define the SortableList component
        customElements.define('sortable-list', SortableList);
    </script>
</body>
</html>
